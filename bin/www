#!/usr/bin/env node
  /**
   * Module dependencies.
   */

  const app = require('../app'), debug = require('debug')('places:server'), http = require('http');

  /*
  * config
  * */
const conf = require('../config.js');

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(conf.PORT);


/**
 * Normalize a port into a number, string, or false.
 */

/**
 * Event listener for HTTP server "error" event.
 */
const onError = error => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof conf.PORT === 'string'
    ? 'Pipe ' + conf.PORT
    : 'Port ' + conf.PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */
const onListening = () => {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
};

server.on('error', onError);
server.on('listening', onListening);
