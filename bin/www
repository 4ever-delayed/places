#!/usr/bin/env node
/**
   * Module dependencies.
   */
const dotenv = require('dotenv');
// env
dotenv.config();


const app = require('../app'); const debug = require('debug')('places:server'); const
  http = require('http');

/*
  * config
  * */
const conf = require('../config.js');

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const { PORT } = process.env;
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(PORT);


/**
 * Event listener for HTTP server "error" event.
 */
const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof PORT === 'string'
    ? `Pipe ${PORT}`
    : `Port ${PORT}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */
const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
};

server.on('error', onError);
server.on('listening', onListening);
